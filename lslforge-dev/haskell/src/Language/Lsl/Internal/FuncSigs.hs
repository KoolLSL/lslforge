module Language.Lsl.Internal.FuncSigs(
    functionSigs,
    findSig,
    convertArgs) where

import Data.List(find)
import Language.Lsl.Internal.Type(LSLType(..), convertValues,LSLValue)

lslFunctionDescriptors = [
        ]

findSig name = find (\ (fname,_,_,_) -> name == fname) functionSigs

convertArgs :: RealFrac a => String -> [LSLValue a] -> [LSLValue a]
convertArgs name args = case findSig name of
    Nothing -> args
    Just (_,_,argTypes,_) -> convertValues (snd (unzip argTypes)) args

functionSigs :: [(String,LSLType,[(String,LSLType)], String)]
functionSigs = [
    ("llAbs",LLInteger,[("val",LLInteger)],
        "Returns an integer that is the positive version of val."),
    ("llAcos",LLFloat,[("val",LLFloat)],
        "Returns the arccosine in radians of val."),
    ("llAddToLandBanList",LLVoid,[("avatar",LLKey),("hours",LLFloat)],
        "Add avatar to the land ban list for hours."),
    ("llAddToLandPassList",LLVoid,[("avatar",LLKey),("hours",LLFloat)],
        "Add avatar to the land pass list for hours."),
    ("llAdjustDamage",LLVoid,[("number",LLInteger),("new_damage",LLFloat)],
        "Experimental. The llAdjustDamage modifies the amount of damage that will be applied by the current on_damage event after it has completed processing."),
    ("llAdjustSoundVolume",LLVoid,[("volume",LLFloat)],
        "Adjusts volume of attached sound (0.0 - 1.0)."),
    ("llAgentInExperience",LLInteger,[("agent",LLKey)],
        "Determines whether or not the specified agent (in the same region) is in the script's experience.<br/>Returns TRUE if the agent is in the experience and the experience can run in the current region."),
    ("llAllowInventoryDrop",LLVoid,[("add",LLInteger)],
        "If add == TRUE, users without permissions can still drop inventory items onto task."),
    ("llAngleBetween",LLFloat,[("a",LLRot),("b",LLRot)],
        "Returns angle between rotation a and b."),
    ("llApplyImpulse",LLVoid,[("force",LLVector),("local",LLInteger)],
        "Applies impulse to object, in local coords if local == TRUE (if the script is physical)."),
    ("llApplyRotationalImpulse",LLVoid,[("force",LLVector),("local",LLInteger)],
        "Applies rotational impulse to object, in local coords if local == TRUE (if the script is physical)."),
    ("llAsin",LLFloat,[("val",LLFloat)],
         "Returns the arcsine in radians of val."),
    ("llAtan2",LLFloat,[("x",LLFloat),("y",LLFloat)],
        "Returns a float that is the arctangent2 of y, x."),
    ("llAttachToAvatar",LLVoid,[("attach_point",LLInteger)],
        "Attaches the object to the avatar who has granted permission to the script. The object is taken into the users inventory and attached to attach_point."),
    ("llAttachToAvatarTemp",LLVoid,[("attach_point",LLInteger)],
        "Same as llAttachToAvatar, with the exception that the object will not create new inventory for the user, and will disappear on detach or disconnect."),
    ("llAvatarOnLinkSitTarget",LLKey,[("link",LLInteger)],
        "Returns a key that is the UUID of the user seated on the prim."),
    ("llAvatarOnSitTarget",LLKey,[],
        "If an avatar is sitting on the sit target, return the avatar's key, NULL_KEY otherwise."),
    ("llAxes2Rot",LLRot,[("fwd",LLVector),("left",LLVector),("up",LLVector)],
         "Returns the rotation defined by the coordinate axes."),
    ("llAxisAngle2Rot",LLRot,[("axis",LLVector),("angle",LLFloat)],
        "Returns the rotation generated angle about axis."),
    ("llBase64ToInteger",LLInteger,[("str",LLString)],
          "Big endian decode of a Base64 string into an integer."),
    ("llBase64ToString",LLString,[("str",LLString)],
        "Converts a Base 64 string to a conventional string.  If the conversion creates any unprintable characters, they are converted to spaces."),
    ("llBreakAllLinks",LLVoid,[],
        "Delinks all tasks in the link set (requires permission PERMISSION_CHANGE_LINKS be set)."),
    ("llBreakLink",LLVoid,[("linknum",LLInteger)],
        "Delinks the task with the given link number (requires permission PERMISSION_CHANGE_LINKS be set)."),
    ("llCSV2List",LLList,[("src",LLString)],
        "Create a list from a string of comma separated values."),
    ("llCastRay",LLList,[("start",LLVector),("end",LLVector),("options",LLList)],
        "Start and end are vectors specifying the start and end point of the ray. The ray must both start and end within the region where the script is located or a script runtime error will be generated. (So be sure to clamp your values!)."),
    ("llCeil",LLInteger,[("val",LLFloat)],
        "Returns smallest integer value >= val."),
    ("llChar",LLString,[("val",LLInteger)],
        "Construct a single character string from the supplied Unicode value."),
    ("llClearCameraParams",LLVoid,[],
        "Resets all camera parameters to default values and turns off scripted camera control."),
    ("llClearLinkMedia",LLInteger,[("link",LLInteger),("face",LLInteger)],
        "Clears (deletes) the media and all params from the given face on the linked prim(s)."),
    ("llClearPrimMedia",LLInteger,[("face",LLInteger)],
        "Clears (deletes) the media and all params from the given face."),
    ("llCloseRemoteDataChannel",LLVoid,[("channel",LLKey)],
        "Closes XML-RPC channel."),
    ("llCloud",LLFloat,[("v",LLVector)],
         "Returns the cloud density at the object position + v."),
    ("llCollisionFilter",LLVoid,[("name",LLString),("id",LLKey),("accept",LLInteger)],
        "If accept == TRUE, only accept collisions with objects name and id (either is optional), otherwise with objects not name or id."),
    ("llCollisionSound",LLVoid,[("impact_sound",LLString),("impact_volume",LLFloat)],
        "Suppress default collision sounds, replace default impact sounds with impact_sound (empty string to just suppress)."),
    ("llCollisionSprite",LLVoid,[("impact_sprite",LLString)],
        "Suppress default collision sprites, replace default impact sprite with impact_sprite (empty string to just suppress)."),
    ("llCos",LLFloat,[("theta",LLFloat)],
        "Theta in radians."),
    ("llCreateCharacter",LLVoid,[("options",LLList)],
        "Creates a pathfinding entity, known as a \"character\", from the object containing the script."),
    ("llCreateKeyValue",LLKey,[("k",LLString),("v",LLString)],
        "*** Experience Persistent Storage ***<br/><br/>Start an asynchronous transaction to create a key-value pair associated with the given experience key using the given key and value. Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed.<br/>string k - The key for the key-value pair<br/>string v - The value for the key-value pair. Maximum 2047 characters, or 4095 if using Mono.<br/>The value for the key-value pair. Maximum 2047 characters, or 4095 if using Mono.<br/>Check wiki for details what dataserver callback returns."),
    ("llCreateLink",LLVoid,[("target",LLKey),("parent",LLInteger)],
        "Attempt to link task script is attached to and target (requires permission PERMISSION_CHANGE_LINKS be set). If parent == TRUE, task script is attached to is the root."),
    ("llDamage",LLVoid,[("target",LLKey),("damage",LLFloat),("damage_type",LLInteger)],
        "Experimental. This function delivers damage to tasks and agent in the same region."),
    ("llDataSizeKeyValue",LLKey,[],
        "*** Experience Persistent Storage ***<br/><br/>Start an asynchronous transaction to request the used and total amount of data allocated for the experience. Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results.<br/>Check wiki for what dataserver callback returns."),
    ("llDeleteCharacter",LLVoid,[],
        "Convert the object back to a standard object, removing all pathfinding options."),
    ("llDeleteKeyValue",LLKey,[("k",LLString)],
    "*** Experience Persistent Storage ***<br/><br/>Start an asynchronous transaction to delete a key-value pair associated with the given experience key with the given key. Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results.<br/>string k - The key for the key-value pair<br/>Check wiki for what dataserver callback returns."),
    ("llDeleteSubList",LLList,[("src",LLList),("start",LLInteger),("end",LLInteger)],
        "Remove the slice from the list and return the remainder."),
    ("llDeleteSubString",LLString,[("src",LLString),("start",LLInteger),("end",LLInteger)],
        "Removes the indicated substring and returns the result."),
    ("llDetachFromAvatar",LLVoid,[],
        "Drop off of avatar."),
    ("llDetectedDamage",LLList,[("number",LLInteger)],
        "Experimental. Returns the list containing pending damage information."),
    ("llDetectedGrab",LLVector,[("number",LLInteger)],
        "Returns the grab offset of the user touching object (returns &lt;0,0,0&gt; if number is not valid sensed object)."),
    ("llDetectedGroup",LLInteger,[("number",LLInteger)],
        "Returns TRUE if detected object is part of same group as owner."),
    ("llDetectedKey",LLKey,[("number",LLInteger)],
        "Returns the key of detected object number (returns empty key if number is not valid sensed object)."),
    ("llDetectedLinkNumber",LLInteger,[("number",LLInteger)],
        "Returns the link position of the triggered event for touches and collisions only."),
    ("llDetectedName",LLString,[("number",LLInteger)],
        "Returns the name of detected object number (returns empty string if number is not valid sensed object)."),
    ("llDetectedOwner",LLKey,[("number",LLInteger)],
        "Returns the key of detected object's owner (returns empty key if number is not valid sensed object)."),
    ("llDetectedPos",LLVector,[("number",LLInteger)],
        "Returns the position of detected object number (returns &lt;0,0,0&gt; if number is not valid sensed object)."),
    ("llDetectedRezzer",LLKey,[("number",LLInteger)],
        "Experimental. Returns a key that is the UUID of the object or avatar that rezzed the detected object number."),
    ("llDetectedRot",LLRot,[("number",LLInteger)],
        "Returns the rotation of detected object number (returns &lt;0,0,0,1&gt; if number is not valid sensed object)."),
    ("llDetectedTouchBinormal",LLVector,[("index",LLInteger)],
        "Returns a vector that is the surface binormal (tangent to the surface) where the touch event was triggered."),
    ("llDetectedTouchFace",LLInteger,[("index",LLInteger)],
        "Returns an integer that is the index of the face the avatar clicked on."),
    ("llDetectedTouchNormal",LLVector,[("index",LLInteger)],
        "Returns a vector that is the surface normal (perpendicular to the surface) where the touch event was triggered."),
    ("llDetectedTouchPos",LLVector,[("index",LLInteger)],
        "Returns a vector that is the position where the object was touched in region coordinates, unless it is attached to the HUD, in which case it returns the position relative to the attach point."),
    ("llDetectedTouchST",LLVector,[("index",LLInteger)],
        "Returns a vector that is the surface coordinates for where the prim was touched. The x & y vector positions contain the horizontal (s) & vertical (t) face coordinates respectively (<s, t, 0.0>). Each component is in the interval [0.0, 1.0]."),
    ("llDetectedTouchUV",LLVector,[("index",LLInteger)],
        "Returns a vector that is the texture coordinates for where the prim was touched. The x & y vector positions contain the u & v face coordinates respectively (<u, v, 0.0>)."),
    ("llDetectedType",LLInteger,[("number",LLInteger)],
        "Returns the type (AGENT, ACTIVE, PASSIVE, SCRIPTED) of detected object (returns 0 if number is not valid sensed object)."),
    ("llDetectedVel",LLVector,[("number",LLInteger)],
        "Returns the velocity of detected object number (returns &lt;0,0,0&gt; if number is not valid sensed object)."),
    ("llDialog",LLVoid,[("avatar",LLKey),("message",LLString),("buttons",LLList),("chat_channel",LLInteger)],
        "Shows a dialog box on the avatar's screen with the message.<br/>Up to 12 strings in the list form buttons.<br/>If a button is clicked, the name is chatted on chat_channel."),
    ("llDie",LLVoid,[],
        "Deletes the object."),
    ("llDumpList2String",LLString,[("src",LLList),("separator",LLString)],
        "Write the list out in a single string using separator between values."),
    ("llEdgeOfWorld",LLInteger,[("pos",LLVector),("dir",LLVector)],
        "Checks to see whether the border hit by dir from pos is the edge of the world (has no neighboring simulator)."),
    ("llEjectFromLand",LLVoid,[("pest",LLKey)],
        "Ejects pest from land that you own."),
    ("llEmail",LLVoid,[("address",LLString),("subject",LLString),("message",LLString)],
        "Sends email to address with subject and message."),
    ("llEscapeURL",LLString,[("url",LLString)],
        "Returns and escaped/encoded version of url, replacing spaces with %20 etc."),
    ("llEuler2Rot",LLRot,[("v",LLVector)],
         "Returns the rotation representation of Euler Angles v."),
    ("llEvade",LLVoid,[("target",LLKey),("options",LLList)],
        "Character will try to hide from pursuers."),
    ("llExecCharacterCmd",LLVoid,[("command",LLInteger),("options",LLList)],
        "Stops the current pathfinding operation or causes the character to jump."),
    ("llFabs",LLFloat,[("val",LLFloat)],
        "Returns a float that is the positive version of val."),
    ("llFleeFrom",LLVoid,[("position",LLVector),("distance",LLFloat),("options",LLList)],
        "Directs a character to keep a specific distance from a specific position in the region or adjacent regions."),
    ("llFloor",LLInteger,[("val",LLFloat)],
        "Returns largest integer value &lt;= val."),
    ("llForceMouselook",LLVoid,[("mouselook",LLInteger)],
        "If mouselook is TRUE any avatar that sits on this object is forced into mouselook mode."),
    ("llFrand",LLFloat,[("mag",LLFloat)],
        "Returns random number in range [0,mag]."),
    ("llGenerateKey",LLKey,[],
        "Return a unique generated key."),
    ("llGetAccel",LLVector,[],
        "Gets the acceleration."),
    ("llGetAgentInfo",LLInteger,[("id",LLKey)],
        "Gets information about agent ID.<br/>Returns AGENT_FLYING, AGENT_ATTACHMENTS, AGENT_SCRIPTED, AGENT_SITTING, AGENT_ON_OBJECT, AGENT_MOUSELOOK, AGENT_AWAY, AGENT_BUSY, AGENT_TYPING, AGENT_CROUCHING, AGENT_ALWAYS_RUN, AGENT_WALKING and/or AGENT_IN_AIR."),
    ("llGetAgentLanguage",LLString,[("key",LLKey)],
        "Returns a string that is the language code of the preferred interface language of the user avatar."),
    ("llGetAgentList",LLList,[("scope",LLInteger),("options",LLList)],
        "Requests a list of agents currently in the region, limited by the scope parameter. Returns a list [key id0, key id1, ..., key idn] or [string error_msg] - returns avatar keys for all agents in the region limited to the area(s) specified by scope.\n integer scope: AGENT_LIST_PARCEL, AGENT_LIST_PARCEL_OWNER, AGENT_LIST_REGION.<br/>list options: Unused."),
    ("llGetAgentSize",LLVector,[("id",LLKey)],
        "If the agent is in the same sim as the object, returns the size of the avatar."),
    ("llGetAlpha",LLFloat,[("face",LLInteger)],
         "Gets the alpha."),
    ("llGetAndResetTime",LLFloat,[],
        "Gets the time in seconds since creation and sets the time to zero."),
    ("llGetAnimation",LLString,[("id",LLKey)],
        "Get the currently playing locomotion animation for avatar id."),
    ("llGetAnimationList",LLList,[("id",LLKey)],
        "Gets a list of all playing animations for avatar id."),
    ("llGetAnimationOverride",LLString,[("anim_state",LLString)],
        "Returns a string that is the name of the animation that is being used for the specified animation state (anim_state)."),
    ("llGetAttached",LLInteger,[],
        "Returns the object attachment point or 0 if not attached."),
    ("llGetAttachedList",LLList,[("avatar",LLKey)],
        "Returns a list of keys of public attachments worn by an avatar (HUD attachment keys are not reported by this function)."),
    ("llGetBoundingBox",LLList,[("object",LLKey)],
        "Returns the bounding box around an object (including any linked prims) relative to the root prim, in a list:  [ (vector) min_corner, (vector) max_corner ]."),
    ("llGetCameraAspect",LLFloat,[],
        "Returns a float value for the current camera's aspect ratio (e.g. width/height) of the agent for which the task has permissions."),
    ("llGetCameraFOV",LLFloat,[],
        "Returns a float value for the current camera's field of view (FOV), in radians, of the agent for which the task has permissions."),
    ("llGetCameraPos",LLVector,[],
        "Gets current camera position for agent task has permissions for."),
    ("llGetCameraRot",LLRot,[],
         "Gets current camera orientation for agent task has permissions for."),
    ("llGetCenterOfMass",LLVector,[],
        "Get the object's center of mass."),
    ("llGetClosestNavPoint",LLList,[("point",LLVector),("options",LLList)],
        "Get a point on the navmesh that is the closest point to <i>point</i>."),
    ("llGetColor",LLVector,[("face",LLInteger)],
        "Gets the color."),
    ("llGetComputeHash",LLString,[("message",LLString),("algorithm",LLString)],
        "Returns a string hex-encoded hash digest of message using cryptographic algorithm."),
    ("llGetCreator",LLKey,[],
        "Returns the creator of the object."),
    ("llGetDate",LLString,[],
        "Gets the date as YYYY-MM-DD."),
    ("llGetDayLength",LLInteger,[],
        "Returns the number of seconds for the current parcel, llGetRegionDayLength is the number of seconds in the day cycle applied to the entire region."),
    ("llGetDayOffset",LLInteger,[],
        "Returns the number of seconds for the current parcel, llGetRegionDayLength is the number of seconds in the day cycle applied to the entire region."),
    ("llGetDisplayName",LLString,[("id",LLKey)],
        "Returns a string that is the non-unique display name of the avatar specified by id."),
    ("llGetEnergy",LLFloat,[],
        "Returns how much energy is in the object as a percentage of maximum."),
    ("llGetEnv",LLString,[("name",LLString)],
        "Returns a string with the requested data about the region. The name can be one of the following: \"agent_limit\", \"dynamic_pathfinding\", \"estate_id\", \"estate_name\", \"frame_number\", \"region_cpu_ratio\", \"region_idle\", \"region_max_prims\", \"region_object_bonus\", \"region_product_name\", \"region_product_sku\", \"region_start_time\", \"sim_channel\", \"sim_version\", \"simulator_hostname\"."),
    ("llGetEnvironment",LLList,[("pos",LLVector),("params",LLList)],
        "Returns a list containing the current environment values for the parcel and region as a list of attributes."),
    ("llGetExperienceDetails",LLList,[("experience_id",LLKey)],
        "Returns a list of details about the experience.<br/>This list has 5 components: [string experience_name, key owner_id, key group_id, key experience_id, integer state, string state_message]<br/>key experience_id - The ID of the experience to query. If NULL_KEY passed, script's experience will be returned or [] if no experience associated."),
    ("llGetExperienceErrorMessage",LLString,[("error",LLInteger)],
        "Returns a text description of a particular Experience LSL error constant. Returns a string describing the error code passed or the string corresponding to error. Returns XP_ERROR_UNKNOWN_ERROR if the error is not a valid error code.<br/>integer error - The error code constant to translate."),
    ("llGetForce",LLVector,[],
        "Gets the force (if the script is physical)."),
    ("llGetFreeMemory",LLInteger,[], -- SEMI-INTERNAL!!!
        "Returns the available heap space for the current script."),
    ("llGetFreeURLs",LLInteger,[],
        "Returns an integer that is the number of available URLs."),
    ("llGetGMTclock",LLFloat,[],
        "Returns a float that is the time in seconds since midnight GMT. Value appears to be truncated to the second."),
    ("llGetGeometricCenter",LLVector,[],
        "Returns the geometric center of the linked set the script is attached to."),
    ("llGetHealth",LLFloat,[("agent_id",LLKey)],
        "Experimental. Returns the current health of an avatar."),
    ("llGetHTTPHeader",LLString,[("request_id",LLKey),("header",LLString)],
        "Returns a string that is the value for header for request_id."),
    ("llGetInventoryAcquireTime",LLString,[("item",LLString)],
        "Returns a string with the timestamp that the item was added to the prim's inventory."),
    ("llGetInventoryCreator",LLKey,[("item",LLString)],
        "Returns the key for the creator of the inventory item."),
    ("llGetInventoryDesc",LLString,[("item",LLString)],
        "Returns a string with the description of the inventory item."),        
    ("llGetInventoryKey",LLKey,[("name",LLString)],
        "Returns the key of the inventory name."),
    ("llGetInventoryName",LLString,[("type",LLInteger),("number",LLInteger)],
        "Get the name of the inventory item number of type."),
    ("llGetInventoryNumber",LLInteger,[("type",LLInteger)],
        "Get the number of items of a given type in the task's inventory.<br/>Valid types: INVENTORY_TEXTURE, INVENTORY_SOUND, INVENTORY_OBJECT, INVENTORY_SCRIPT, INVENTORY_CLOTHING, INVENTORY_BODYPART, INVENTORY_NOTECARD, INVENTORY_LANDMARK, INVENTORY_ALL."),
    ("llGetInventoryPermMask",LLInteger,[("item",LLString),("mask",LLInteger)],
        "Returns the requested permission mask for the inventory item."),
    ("llGetInventoryType",LLInteger,[("name",LLString)],
        "Returns the type of the inventory name."),
    ("llGetKey",LLKey,[],
        "Get the key for the task the script is attached to."),
    ("llGetLandOwnerAt",LLKey,[("pos",LLVector)],
        "Returns the key of the land owner, NULL_KEY if public."),
    ("llGetLinkKey",LLKey,[("linknum",LLInteger)],
        "Get the key of linknumber in link set."),
    ("llGetLinkMedia",LLList,[("link",LLInteger),("face",LLInteger),("params",LLList)],
        "Get the media params for a particular face on a link'ed prim, given the desired list of named params."),
    ("llGetLinkName",LLString,[("linknum",LLInteger)],
        "Get the name of linknumber in link set."),
    ("llGetLinkNumber",LLInteger,[],
        "Returns what number in a link set the script is attached to (0 means no link, 1 the root, 2 for first child, etc.)."),
    ("llGetLinkNumberOfSides",LLInteger,[("link",LLInteger)],
        "Returns an integer that is the number of faces (or sides) of the prim link."),
    ("llGetLinkPrimitiveParams",LLList,[("link",LLInteger),("params",LLList)],
        "Identical to llGetPrimitiveParams except that it acts on the prim specified by the link number given."),
    ("llGetLinkSitFlags",LLInteger,[("linknum",LLInteger)],
        "Returns the current flags on the link's sittarget."),
    ("llGetListEntryType",LLInteger,[("src",LLList),("index",LLInteger)],
        "Returns the type of the index entry in the list\n(TYPE_INTEGER, TYPE_FLOAT, TYPE_STRING, TYPE_KEY, TYPE_VECTOR, TYPE_ROTATION, or TYPE_INVALID if index is off list)."),
    ("llGetListLength",LLInteger,[("src",LLList)],
        "Get the number of elements in the list."),
    ("llGetLocalPos",LLVector,[],
        "Gets the position relative to the root (if the script isn't physical)."),
    ("llGetLocalRot",LLRot,[],
        "Gets the rotation local to the root (if the script isn't physical)."),
    ("llGetMass",LLFloat,[],
        "Get the mass of task name that script is attached to."),
    ("llGetMassMKS",LLFloat,[],
        "Get the mass of task name that script is attached to."),
    ("llGetMaxScaleFactor",LLFloat,[],
        "Returns a float that is the largest scaling factor that can be used with llScaleByFactor to resize the object. This maximum is determined by the Linkability Rules and prim scale limits."),
    ("llGetMemoryLimit",LLInteger,[],
        "Get the maximum memory a script can use."),
    ("llGetMinScaleFactor",LLFloat,[],
        "Returns a float that is the smallest scaling factor that can be used with llScaleByFactor to resize the object. This minimum is determined by the prim scale limits."),
    ("llGetMoonDirection",LLVector,[],
        "Returns a normalized vector to the current moon position at the location of object."),
    ("llGetMoonRotation",LLRot,[],
        "Return the rotation applied to the moon for the parcel at the location of the object."),
    ("llGetNextEmail",LLVoid,[("address",LLString),("subject",LLString)],
        "Get the next waiting email with appropriate address and/or subject (if blank they are ignored)."),
    ("llGetNotecardLine",LLKey,[("name",LLString),("line",LLInteger)],
        "Returns line of notecard name via the dataserver event."),
    ("llGetNotecardLineSync",LLString,[("name",LLString),("line",LLInteger)],
        "Returns line of the notecard name from the region's notecard cache immediately without raising a dataserver event"),        
    ("llGetNumberOfNotecardLines",LLKey,[("name",LLString)],
        "Returns number of lines in notecard 'name' via the dataserver event (cast return value to integer)."),
    ("llGetNumberOfPrims",LLInteger,[],
        "Returns the number of prims in a link set the script is attached to."),
    ("llGetNumberOfSides",LLInteger,[],
        "Returns the number of sides."),
    ("llGetObjectAnimationNames",LLList,[],
        "Returns a list of names of animations playing in the current object."),
    ("llGetObjectDesc",LLString,[],
        "Returns the description of the object the script is attached to."),
    ("llGetObjectDetails",LLList,[("id",LLKey),("params",LLList)],
        "Returns a list of the details for id, specifically those requested in params."),
    ("llGetObjectLinkKey",LLKey,[("object_id",LLKey),("link",LLInteger)],
        "Returns the key of the linked prim link in the linkset identified by object_id."),
    ("llGetObjectMass",LLFloat,[("id",LLKey)],
        "Get the mass of the object with key id."),
    ("llGetObjectName",LLString,[],
        "Returns the name of the object script is attached to."),
    ("llGetObjectPermMask",LLInteger,[("mask",LLInteger)],
        "Returns the requested permission mask for the root object the task is attached to."),
    ("llGetObjectPrimCount",LLInteger,[("id",LLKey)],
        "Returns the total number of prims for an object."),
    ("llGetOmega",LLVector,[],
        "Gets the omega."),
    ("llGetOwner",LLKey,[],
        "Returns the owner of the task."),
    ("llGetOwnerKey",LLKey,[("id",LLKey)],
        "Find the owner of id."),
    ("llGetParcelDetails",LLList,[("pos",LLVector),("params",LLList)],
        "Gets the parcel details specified in params for the parcel at pos.<br/>Params is one or more of: PARCEL_DETAILS_NAME, _DESC, _OWNER, _GROUP, _AREA."),
    ("llGetParcelFlags",LLInteger,[("pos",LLVector)],
        "Get the parcel flags (PARCEL_FLAG_*) for the parcel including the point pos."),
    ("llGetParcelMaxPrims",LLInteger,[("pos",LLVector),("sim_wide",LLInteger)],
        "Gets the maximum number of prims allowed on the parcel at pos."),
    ("llGetParcelMusicURL",LLString,[],
        "Returns a string containing the parcel streaming audio URL."),
    ("llGetParcelPrimCount",LLInteger,[("pos",LLVector),("category",LLInteger),("sim_wide",LLInteger)],
        "Gets the number of prims on the parcel of the given category.<br/>Categories: PARCEL_COUNT_TOTAL, _OWNER, _GROUP, _OTHER, _SELECTED, _TEMP."),
    ("llGetParcelPrimOwners",LLList,[("pos",LLVector)],
        "Returns a list of all residents who own objects on the parcel and the number of objects they own.<br/>Requires owner-like permissions for the parcel."),
    ("llGetPermissions",LLInteger,[],
        "Return what permissions have been enabled."),
    ("llGetPermissionsKey",LLKey,[],
        "Return agent that permissions are enabled for.  NULL_KEY if not enabled."),
    ("llGetPhysicsMaterial",LLList,[],
        "Returns a list of the form [float gravity_multiplier, float restitution, float friction, float density] ."),
    ("llGetPos",LLVector,[],
        "Gets the position (if the script isn't physical)."),
    ("llGetPrimMediaParams",LLList,[("face",LLInteger),("params",LLList)],
        "Get the media params for a particular face on an object, given the desired list of names."),
    ("llGetPrimitiveParams",LLList,[("params",LLList)],
        "Gets primitive parameters specified in the params list."),
    ("llGetRegionAgentCount",LLInteger,[],
        "Returns an integer that is the number of avatars in the region."),
    ("llGetRegionCorner",LLVector,[],
        "Returns a vector with the south west corner x,y position of the region the object is in."),
    ("llGetRegionDayLength",LLInteger,[],
        "Return the number of seconds in the day cycle applied to the current region. llGetDayLength returns the number of seconds for the current parcel."),
    ("llGetRegionDayOffset",LLInteger,[],
        "Return the number of seconds added to the current time before calculating the current environmental time for the region. llGetDayOffset returns the value for the current parcel."),
    ("llGetRegionFPS",LLFloat,[],
        "Returns the mean region frames per second."),
    ("llGetRegionFlags",LLInteger,[],
        "Get the region flags (REGION_FLAG_*) for the region the object is in."),
    ("llGetRegionMoonDirection",LLVector,[],
        "Returns a normalized vector to the current moon position at the region's location of object containing the script. llGetMoonDirection is the vector to the parcel's moon."),
    ("llGetRegionMoonRotation",LLRot,[],
        "Return the rotation applied to the moon for the region at the location of the object containing the script. llGetMoonRotation does the same for the parcel."),
    ("llGetRegionName",LLString,[],
        "Returns the current region name."),
    ("llGetRegionSunDirection",LLVector,[],
        "Returns a normalized vector to the current sun position at the location of object containing the script. llGetSunDirection does the same for the parcel."),
    ("llGetRegionSunRotation",LLRot,[],
        "Return the rotation applied to the sun for the region at the location of the object containing the script. llGetSunRotation does the same for the parcel."),
    ("llGetRegionTimeDilation",LLFloat,[],
        "Returns the current time dilation as a float between 0 and 1."),
    ("llGetRootPosition",LLVector,[],
        "Gets the global position of the root object of the object script is attached to."),
    ("llGetRootRotation",LLRot,[],
        "Gets the global rotation of the root object of the object script is attached to."),
    ("llGetRot",LLRot,[],
        "Gets the rotation (if the script isn't physical)."),
    ("llGetSPMaxMemory",LLInteger,[],
        "Returns the integer of the most bytes used while llScriptProfiler was last active."),
    ("llGetScale",LLVector,[],
        "Gets the scale."),
    ("llGetScriptName",LLString,[],
        "Returns the script name."),
    ("llGetScriptState",LLInteger,[("name",LLString)],
        "Returns TRUE if script name is running."),
    ("llGetSimStats",LLFloat,[("stat_type",LLInteger)],
        "Returns the value of a particular simulator statistic."),
    ("llGetSimulatorHostname",LLString,[],
        "Gets the hostname of the machine script is running on (same as string in viewer Help dialog)."),
    ("llGetStartParameter",LLInteger,[],
        "Get's the start paramter passed to llRezObject."),
    ("llGetStaticPath",LLList,[("start",LLVector),("end",LLVector),("radius",LLFloat),("params",LLList)],
        "Returns a list of position vectors indicating pathfinding waypoints between positions at start and end, for a character of a given radius."),
    ("llGetStatus",LLInteger,[("status",LLInteger)],
        "Gets value of status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z)."),
    ("llGetSubString",LLString,[("src",LLString),("start",LLInteger),("end",LLInteger)],
        "Returns the indicated substring."),
    ("llGetSunDirection",LLVector,[],
        "Returns a normalized vector to the current sun position at the location of object containing the script. llGetRegionSunDirection is the vector to region's sun."),
    ("llGetSunRotation",LLVector,[],
        "Return the rotation applied to the sun for the parcel at the location of the object containing the script. llGetRegionSunRotation does the same at the region level."),
    ("llGetTexture",LLString,[("face",LLInteger)],
        "Gets the texture of face (if it's a texture in the object inventory, otherwise the key in a string)."),
    ("llGetTextureOffset",LLVector,[("side",LLInteger)],
        "Returns the texture offset of side in the x and y components of a vector."),
    ("llGetTextureRot",LLFloat,[("side",LLInteger)],
        "Returns the texture rotation of side."),
    ("llGetTextureScale",LLVector,[("side",LLInteger)],
        "Returns the texture scale of side in the x and y components of a vector."),
    ("llGetTime",LLFloat,[],
        "Gets the time in seconds since creation."),
    ("llGetTimeOfDay",LLFloat,[],
        "Gets the time in seconds since Second Life server midnight (or since server up-time; whichever is smaller)."),
    ("llGetTimestamp",LLString,[],
        "Gets the timestamp in the format: YYYY-MM-DDThh:mm:ss.ff..fZ."),
    ("llGetTorque",LLVector,[],
        "Gets the torque (if the script is physical)."),
    ("llGetUnixTime",LLInteger,[],
        "Get the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC from the system clock."),
    ("llGetUsedMemory",LLInteger,[],
        "Returns the integer of the number of bytes of memory currently in use by the script."),
    ("llGetUsername",LLString,[("id",LLKey)],
        "Returns a string that is the unique username of the avatar specified by id."),
    ("llGetVel",LLVector,[],
        "Gets the velocity."),
    ("llGetVisualParams",LLList,[("afent_id",LLKey),("params",LLList)],
        "Returns a list of the details for agentid requested in params."),
    ("llGetWallclock",LLFloat,[],
        "Returns a float that is the time in seconds since midnight Pacific time (PST/PDT), truncated to whole seconds."),
    ("llGiveInventory",LLVoid,[("destination",LLKey),("inventory",LLString)],
        "Give inventory to destination."),
    ("llGiveInventoryList",LLVoid,[("destination",LLKey),("category",LLString),("inventory",LLList)],
        "Give inventory to destination in a new category."),
    ("llGiveMoney",LLInteger,[("destination",LLKey),("amount",LLInteger)],
        "Transfer amount of money from script owner to destination."),
    ("llGodLikeRezObject",LLVoid,[("inventory",LLKey),("pos",LLVector)],
        "Rez directly off of a UUID if owner has god-bit set."),
    ("llGround",LLFloat,[("v",LLVector)],
        "Returns the ground height below the object position + v."),
    ("llGroundContour",LLVector,[("v",LLVector)],
        "Returns the ground contour below the object position + v."),
    ("llGroundNormal",LLVector,[("v",LLVector)],
        "Returns the ground normal below the object position + v."),
    ("llGroundRepel",LLVoid,[("height",LLFloat),("water",LLInteger),("tau",LLFloat)],
        "Critically damps to height if within height*0.5 of level (either above ground level or above the higher of land and water if water == TRUE)."),
    ("llGroundSlope",LLVector,[("v",LLVector)],
        "Returns the ground slope below the object position + v."),
    ("llHMAC",LLString,[("private_key",LLString),("msg",LLString),("algorithm",LLString)],
        "Returns a string that is the Base64-encoded HMAC hash of msg when using hash algorithm "),
    ("llHTTPRequest",LLKey,[("url",LLString),("parameters",LLList),("body",LLString)],
        "Send an HTTP request."),
    ("llHTTPResponse",LLVoid,[("request_id",LLKey),("parameters",LLInteger),("body",LLString)],
        "Responds to request_id with status and body."),
    ("llHash",LLInteger,[("val",LLString)],
        "Returns a 32bit hash for the provided string."),
    ("llInsertString",LLString,[("dst",LLString),("position",LLInteger),("src",LLString)],
         "Inserts src into dst at position and returns the result."),
    ("llInstantMessage",LLVoid,[("user",LLKey),("message",LLString)],
        "IMs message to the user."),
    ("llIntegerToBase64",LLString,[("number",LLInteger)],
        "Big endian encode of of integer as a Base64 string."),
    ("llIsFriend",LLInteger,[("agent_id",LLKey)],
        "Returns a boolean (an integer) that is TRUE if agent_id and the owner of the prim the script is in are friends, otherwise FALSE."),        
    ("llJson2List",LLList,[("src",LLString)],
        "This function takes a string representing JSON, and returns a list of the top level."),
    ("llJsonGetValue",LLString,[("string",LLString),("specifiers",LLList)],
        "Gets the value indicated by specifiers from the json string."),
    ("llJsonSetValue",LLString,[("json",LLString),("specifiers",LLList),("value",LLString)],
        "Returns, if successful, a new JSON text string which is json with the value indicated by the specifiers list set to value."),
    ("llJsonValueType",LLString,[("json",LLString),("specifiers",LLList)],
        "Gets the JSON type for the value in json at the location specifiers."),
    ("llKey2Name",LLString,[("id",LLKey)],
        "Returns the name of the object key, iff the object is in the current simulator, otherwise the empty string."),
    ("llKeyCountKeyValue",LLKey,[],
        "*** Experience Persistent Storage ***<br/><br/>Start an asynchronous transaction to request the number of keys in the system. Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results.<br/>Check wiki for what dataserver callback returns."),
    ("llKeysKeyValue",LLKey,[("first",LLInteger),("count",LLInteger)],
        "*** Experience Persistent Storage ***<br/><br/>Start an asynchronous transaction to request a number of keys. Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed.<br/>integer first - Zero-based index of the first key to retrieve <br/>integer count - Number of keys to retriever<br/>Check wiki for details and what dataserver callback returns."),
    ("llLinear2sRGB",LLVector,[("color",LLVector)],
        "Transforms a color specified in linear RGB colorspace into the sRGB colorspace."),
    ("llLinkAdjustSoundVolume",LLVoid,[("link",LLInteger),("volume",LLFloat)],
        "Adjusts volume of attached sound (0.0 - 1.0) for the prim(s) link."),
    ("llLinkParticleSystem",LLVoid,[("link",LLInteger),("rules",LLList)],
        "A particle system defined by a list of rules is set for the prim(s) link. This is identical to llParticleSystem except that it applies to a specified linked prim and not just the prim the script is in."),
    ("llLinkPlaySound",LLVoid,[("link",LLInteger),("sound",LLString),("volume",LLFloat),("flags",LLInteger)],
        "Plays attached sound once at volume (0.0 - 1.0)."),
    ("llLinksetDataAvailable",LLInteger,[],
        "Returns the number of bytes available in the linkset's datastore."),
    ("llLinksetDataCountFound",LLInteger,[("pattern",LLString)],
        "Returns the number of keys in the linkset datastore that match the pattern."),
    ("llLinksetDataCountKeys",LLInteger,[],
        "Returns the number of unique keys that have been stored in the linkset's datastore."),
    ("llLinksetDataDelete",LLInteger,[("name",LLString)],
        "Erases a name:value pair from the linkset's datastore. \n"),
    ("llLinksetDataDeleteFound",LLList,[("pattern",LLString),("pass",LLString)],
        "Finds and attempts to delete all keys in the data store that match pattern. Returns a list of the number of keys deleted or skipped."),
    ("llLinksetDataDeleteProtected",LLInteger,[("name",LLString),("pass",LLString)],
        "Erases a protected name:value pair from the linkset's datastore. \n"),
    ("llLinksetDataFindKeys",LLList,[("pattern",LLString),("start",LLInteger),("count",LLInteger)],
         "Returns a list of up to count keys from the datastore that match pattern, starting at the one indicated by start."),
    ("llLinksetDataListKeys",LLList,[("start",LLInteger),("count",LLInteger)],
        "Returns a list of up to count keys in the datastore, starting at the one indicated by start."),
    ("llLinksetDataRead",LLString,[("name",LLString)],
        "Return the value in the linkset's datastore for the provided name."),
    ("llLinksetDataReadProtected",LLString,[("name",LLString),("pass",LLString)],
        "Return the protected value in the linkset's datastore for the provided name. \n"),
    ("llLinksetDataReset",LLVoid,[],
        "Erases all name:value pairs stored in the linkset's datastore."),
    ("llLinksetDataWrite",LLInteger,[("name",LLString),("value",LLString)],
        "Create or update a name:value pair in the linkset datastore."),
    ("llLinksetDataWriteProtected",LLInteger,[("name",LLString),("value",LLString),("pass",LLString)],
        "Create or update a protected name:value pair in the linkset datastore."),
    ("llLinkSetSoundQueueing",LLVoid,[("link",LLInteger),("queue",LLInteger)],
        "Determines whether attached sound calls wait for the current sound to finish (0 = no [default], nonzero = yes)."),
    ("llLinkSetSoundRadius",LLVoid,[("link",LLInteger),("radius",LLFloat)],
        "Establishes a hard cut-off radius for audibility of scripted sounds (both attached and triggered)."),
    ("llLinkSitTarget",LLVoid,[("link",LLInteger),("offset",LLVector),("rot",LLRot)],
        "Set the sit location for the linked prim(s). The sit location is relative to the prim's position and rotation."),
    ("llLinkStopSound",LLVoid,[("link",LLInteger)],
        "Stops currently attached sound\n"),
    ("llList2CSV",LLString,[("src",LLList)],
        "Create a string of comma separated values from list."),
    ("llList2Float",LLFloat,[("src",LLList),("index",LLInteger)],
        "Copy the float at index in the list."),
    ("llList2Integer",LLInteger,[("src",LLList),("index",LLInteger)],
        "Copy the integer at index in the list."),
    ("llList2Json",LLString,[("type",LLString),("values",LLList)],
        "This function takes a list and returns a JSON string of that list as either a json object or json array."),
    ("llList2Key",LLKey,[("src",LLList),("index",LLInteger)],
        "Copy the key at index in the list."),
    ("llList2List",LLList,[("src",LLList),("start",LLInteger),("end",LLInteger)],
        "Copy the slice of the list from start to end."),
    ("llList2ListSlice",LLList,[("src",LLList),("start",LLInteger),("end",LLInteger),("stride",LLInteger),("slice_index",LLInteger)],
        "Returns a list of the slice_index'th element of every stride in strided list whose index is a multiple of stride in the range start to end."),
    ("llList2ListStrided",LLList,[("src",LLList),("start",LLInteger),("end",LLInteger),("stride",LLInteger)],
        "Copy the strided slice of the list from start to end."),
    ("llList2Rot",LLRot,[("src",LLList),("index",LLInteger)],
        "Copy the rotation at index in the list."),
    ("llList2String",LLString,[("src",LLList),("index",LLInteger)],
        "Copy the string at index in the list."),
    ("llList2Vector",LLVector,[("src",LLList),("index",LLInteger)],
        "Copy the vector at index in the list."),
    ("llListen",LLInteger,[("channel",LLInteger),("name",LLString),("id",LLKey),("msg",LLString)],
        "Sets a callback for msg on channel from name and id (name, id, and/or msg can be empty) and returns an identifier that can be used to deactivate or remove the listen."),
    ("llListenControl",LLVoid,[("number",LLInteger),("active",LLInteger)],
        "Makes a listen event callback active or inactive."),
    ("llListenRemove",LLVoid,[("number",LLInteger)],
        "Removes listen event callback number."),
    ("llListFindList",LLInteger,[("src",LLList),("test",LLList)],
        "Returns the start of the first instance of test in src, -1 if not found."),
    ("llListFindListNext",LLInteger,[("src",LLList),("test",LLList),("instance",LLInteger)],
        "Returns the integer index of the nth instance of test in src. If test is not found in src, -1 is returned"),        
    ("llListFindStrided",LLInteger,[("src",LLList),("test",LLList),("start",LLInteger),("end",LLInteger),("stride",LLInteger)],
        "Returns the start of the first instance of test in src, -1 if not found."),
    ("llListInsertList",LLList,[("dest",LLList),("src",LLList),("start",LLInteger)],
        "Inserts src into dest at position start."),
    ("llListRandomize",LLList,[("src",LLList),("stride",LLInteger)],
        "Returns a randomized list of blocks of size stride."),
    ("llListReplaceList",LLList,[("dest",LLList),("src",LLList),("start",LLInteger),("end",LLInteger)],
        "Replaces start through end of dest with src."),
    ("llListSort",LLList,[("src",LLList),("stride",LLInteger),("ascending",LLInteger)],
        "Sort the list into blocks of stride in ascending order if ascending == TRUE.  Note that sort only works between same types."),
    ("llListSortStrided",LLList,[("src",LLList),("stride",LLInteger),("stride_index",LLInteger),("ascending",LLInteger)],
        "Returns a list that is src sorted by the stride_index item in every stride."),
    ("llListStatistics",LLFloat,[("operation",LLInteger),("src",LLList)],
        "Perform statistical aggregate functions on list src using LIST_STAT_* operations."),
    ("llLoadURL",LLVoid,[("avatar_id",LLKey),("message",LLString),("url",LLString)],
        "Shows dialog to avatar avatar_id offering to load web page at URL.  If user clicks yes, launches their web browser."),
    ("llLog",LLFloat,[("val",LLFloat)],
        "Returns the base e log of val if val > 0, otherwise returns 0."),
    ("llLog10",LLFloat,[("val",LLFloat)],
        "Returns the base 10 log of val if val > 0, otherwise returns 0."),
    ("llLookAt",LLVoid,[("target",LLVector),("strength",LLFloat),("damping",LLFloat)],
        "Cause object name to point it's forward axis towards target."),
    ("llLoopSound",LLVoid,[("sound",LLString),("volume",LLFloat)],
        "Plays attached sound looping indefinitely at volume (0.0 - 1.0)."),
    ("llLoopSoundMaster",LLVoid,[("sound",LLString),("volume",LLFloat)],
        "Plays attached sound looping at volume (0.0 - 1.0), declares it a sync master."),
    ("llLoopSoundSlave",LLVoid,[("sound",LLString),("volume",LLFloat)],
        "Plays attached sound looping at volume (0.0 - 1.0), synced to most audible sync master\n."),
    ("llMD5String",LLString,[("src",LLString),("nonce",LLInteger)],
        "Performs a RSA Data Security, Inc. MD5 Message-Digest Algorithm on string with nonce.  Returns a 32 character hex string."),
    ("llMakeExplosion",LLVoid,[("particles",LLInteger),("scale",LLFloat),("vel",LLFloat),("lifetime",LLFloat),("arc",LLFloat),("texture",LLString),("offset",LLVector)],
        "Make a round explosion of particles."),
    ("llMakeFire",LLVoid,[("particles",LLInteger),("scale",LLFloat),("vel",LLFloat),("lifetime",LLFloat),("arc",LLFloat),("texture",LLString),("offset",LLVector)],
        "Make fire like particles."),
    ("llMakeFountain",LLVoid,[("particles",LLInteger),("scale",LLFloat),("vel",LLFloat),("lifetime",LLFloat),("arc",LLFloat),("bounce",LLInteger),("texture",LLString),("offset",LLVector),("bounce_offset",LLFloat)],
        "Make a fountain of particles."),
    ("llMakeSmoke",LLVoid,[("particles",LLInteger),("scale",LLFloat),("vel",LLFloat),("lifetime",LLFloat),("arc",LLFloat),("texture",LLString),("offset",LLVector)],
        "Make smoke like particles."),
    ("llManageEstateAccess",LLInteger,[("action",LLInteger),("avatar",LLKey)],
        "Use to add or remove agents from the estate's agent access or ban lists or groups from the estate's group access list."),
    ("llMapDestination",LLVoid,[("simname",LLString),("pos",LLVector),("look_at",LLVector)],
        "Opens world map centered on region with pos highlighted.<br/>Only works for scripts attached to avatar, or during touch events.\n(NOTE: look_at currently does nothing)."),
    ("llMessageLinked",LLVoid,[("linknum",LLInteger),("num",LLInteger),("str",LLString),("id",LLKey)],
        "Sends num, str, and id to members of the link set (LINK_ROOT sends to root task in a linked set, <br/>LINK_SET sends to all tasks,<br/>LINK_ALL_OTHERS to all other tasks,<br/>LINK_ALL_CHILDREN to all children,<br/>LINK_THIS to the task the script it is in)."),
    ("llMinEventDelay",LLVoid,[("delay",LLFloat)],
        "Set the minimum time between events being handled."),
    ("llModPow",LLInteger,[("a",LLInteger),("b",LLInteger),("c",LLInteger)],
        "Returns a raised to the b power, mod c. ( (a**b)%c ). b is capped at 0xFFFF (16 bits)."),
    ("llModifyLand",LLVoid,[("action",LLInteger),("size",LLInteger)],
        "Modify land with action (LAND_LEVEL, LAND_RAISE, LAND_LOWER, LAND_SMOOTH, LAND_NOISE, LAND_REVERT) on size (LAND_SMALL_BRUSH, LAND_MEDIUM_BRUSH, LAND_LARGE_BRUSH)."),
    ("llMoveToTarget",LLVoid,[("target",LLVector),("tau",LLFloat)],
        "Critically damp to target in tau seconds (if the script is physical)."),
    ("llName2Key",LLKey,[("name",LLString)],
        "Returns a key the Agent ID for the named agent in the region. If there is no agent with the specified name currently signed onto the region, this function returns the value NULL_KEY. Names are always provided in the form \"First[ Last]\" or \"first[.last]\" (first name with an optional last name.) If the last name is omitted a last name of \"Resident\" is assumed. Case is not considered when resolving agent names."),
    ("llNavigateTo",LLVoid,[("pos",LLVector),("options",LLList)],
        "Directs an object to travel to a defined position in the region or adjacent regions."),
    ("llOffsetTexture",LLVoid,[("offsets",LLFloat),("offsett",LLFloat),("face",LLInteger)],
        "Sets the texture s, t offsets for the chosen face."),
    ("llOpenFloater",LLInteger,[("floater_name",LLString),("url",LLString),("params",LLList)],
        "In a Linden owned experience, requests a new floater with the provided title on the viewer."),
    ("llOpenRemoteDataChannel",LLVoid,[],
        "Creates a channel to listen for XML-RPC calls.  Will trigger a remote_data event with channel id once it is available."),
    ("llOrd",LLInteger,[("val",LLString),("index",LLInteger)],
        "Calculates the ordinal value (UTF-32) for a character in a string."),
    ("llOverMyLand",LLInteger,[("id",LLKey)],
        "Returns TRUE if id is over land owner of object owns, FALSE otherwise."),
    ("llOwnerSay",LLVoid,[("msg",LLString)],
        "Says msg to owner only (if owner in sim)."),
    ("llParcelMediaCommandList",LLVoid,[("command",LLList)],
        "Sends a list of commands, some with arguments, to a parcel."),
    ("llParcelMediaQuery",LLList,[("query",LLList)],
        "Sends a list of queries, returns a list of results."),
    ("llParseString2List",LLList,[("src",LLString),("separators",LLList),("spacers",LLList)],
        "Breaks src into a list, discarding separators, keeping spacers (separators and spacers must be lists of strings, maximum of 8 each)."),
    ("llParseStringKeepNulls",LLList,[("src",LLString),("separators",LLList),("spacers",LLList)],
        "Breaks src into a list, discarding separators, keeping spacers (separators and spacers must be lists of strings, maximum of 8 each), keeping any null values generated."),
    ("llParticleSystem",LLVoid,[("rules",LLList)],
        "Creates a particle system based on rules. Empty list removes particle system from object.<br/>List format is [ rule1, data1, rule2, data2 . . . rulen, datan ]."),
    ("llPassCollisions",LLVoid,[("pass",LLInteger)],
        "If pass == TRUE, collisions are passed from children on to parents (default is FALSE)."),
    ("llPassTouches",LLVoid,[("pass",LLInteger)],
        "If pass == TRUE, touches are passed from children on to parents (default is FALSE)."),
    ("llPatrolPoints",LLVoid,[("patrolPoints",LLList),("options",LLList)],
        "Sets the object patrolling between the points specified in patrolPoints."),
    ("llPlaySound",LLVoid,[("sound",LLString),("volume",LLFloat)],
        "Plays attached sound once at volume (0.0 - 1.0)."),
    ("llPlaySoundSlave",LLVoid,[("sound",LLString),("volume",LLFloat)],
        "Plays attached sound once at volume (0.0 - 1.0), synced to next loop of most audible sync master."),
    ("llPointAt",LLVoid,[("pos",LLVector)],
        "Make agent that owns object point at pos."),
    ("llPow",LLFloat,[("base",LLFloat),("exponent",LLFloat)],
        "Returns 0 and triggers Math Error for imaginary results."),
    ("llPreloadSound",LLVoid,[("sound",LLString)],
        "Preloads a sound on viewers within range."),
    ("llPursue",LLVoid,[("target",LLKey),("options",LLList)],
        "Causes the object to pursue target."),
    ("llPushObject",LLVoid,[("id",LLKey),("impulse",LLVector),("ang_impulse",LLVector),("local",LLInteger)],
        "Applies impulse and ang_impulse to object id."),
    ("llReadKeyValue",LLKey,[("k",LLString)],
        "*** Experience Persistent Storage ***<br/><br/>Start an asynchronous transaction to read the value associated with the specified key and the specified experience. Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results.<br/>string k - The key for the key-value pair.<br/>Check wiki for details what dataserver callback returns."),
    ("llRefreshPrimURL",LLVoid,[],
        "Reloads the web page shown on the sides of the object."),
    ("llRegionSay",LLVoid,[("channel",LLInteger),("msg",LLString)],
        "Broadcasts message on the specified chat channel to the whole region."),
    ("llRegionSayTo",LLVoid,[("target",LLKey),("channel",LLInteger),("msg",LLString)],
        "Says the text supplied in string msg on channel supplied in integer channel to the object or avatar specified by target."),
    ("llReleaseCamera",LLVoid,[("avatar",LLKey)],
        "Return camera to agent."),
    ("llReleaseControls",LLVoid,[],
        "Stop taking inputs."),
    ("llReleaseURL",LLVoid,[("url",LLString)],
        "Releases the specified URL, it will no longer be usable."),
    ("llRemoteDataReply",LLVoid,[("channel",LLKey),("message_id",LLKey),("sdata",LLString),("idata",LLInteger)],
        "Send an XML-RPC reply to message_id on channel with payload of string sdata and integer idata."),
    ("llRemoteDataSetRegion",LLVoid,[],
        "If an object using remote data channels changes regions, you must call this function to reregister the remote data channels.<br/>You do not need to make this call if you don't change regions."),
    ("llRemoteLoadScript",LLVoid,[("target",LLKey),("name",LLString),("running",LLInteger),("start_param",LLInteger)], -- deprecated/removed
        "Deprecated.  Please use llRemoteLoadScriptPin instead."),
    ("llRemoteLoadScriptPin",LLVoid,[("target",LLKey),("name",LLString),("pin",LLInteger),("running",LLInteger),("start_param",LLInteger)],
        "If the owner of the object this script is attached can modify target, they are in the same region, and the matching pin is used, copy script name onto target, if running == TRUE, start the script with param."),
    ("llRemoveFromLandBanList",LLVoid,[("avatar",LLKey)],
        "Remove avatar from the land ban list."),
    ("llRemoveFromLandPassList",LLVoid,[("avatar",LLKey)],
        "Remove avatar from the land pass list."),
    ("llRemoveInventory",LLVoid,[("inventory",LLString)],
        "Remove the named inventory item."),
    ("llRemoveVehicleFlags",LLVoid,[("flags",LLInteger)],
        "Removes the enabled bits in 'flags'."),
    ("llReplaceAgentEnvironment",LLInteger,[("agent_id",LLKey),("transition",LLFloat),("environment",LLString)],
        "*** Experience enabled script only ***<br/><br/>Overrides the current region and parcel environment seen by an agent and returns ENV_* error code or '1' upon success. The new environment persists until the agent crosses to a new region or this function is called with the NULL_KEY or empty string in the environment parameter for the particular agent, doing so will strip all environmental settings applied to this agent as part of the experience. This function must be executed as part of an experience."),
    ("llReplaceEnvironment",LLInteger,[("position",LLVector),("environment",LLString),("track_no",LLInteger),("day_length",LLInteger),("day_offset",LLInteger)],
        "Replaces the environment in a parcel or a region."),
    ("llReplaceSubString",LLString,[("src",LLString),("pattern",LLString),("replacement_pattern",LLString),("count",LLInteger)],
        "Returns a string that is the result of replacing the first count matching instances pattern in src with replacement_pattern.\nIf count = 0, all matching substrings are replaced. If count > 0, substrings are replaced starting from the left/beginning of src. If count < 0, substrings are replaced starting from the right/end of src."),        
    ("llRequestAgentData",LLKey,[("id",LLKey),("data",LLInteger)],
        "Requests data about agent id.  When data is available the dataserver event will be raised."),
    ("llRequestDisplayName",LLKey,[("id",LLKey)],
        "Requests the Display Name of the agent identified by id. When the Display Name is available the dataserver event will be raised. The agent identified by id does not need to be in the same region or online at the time of the request."),
    ("llRequestExperiencePermissions",LLVoid,[("agent",LLKey),("name",LLString)],
        "Asks the agent for permission to participate in an experience.<br/>key agent - key of the agent to request permissions from<br/>string name - deprecated, no longer used.<br/>Similar to llRequestPermissions with all permission flags, however the result will flow to experience_permissions or experience_permissions_denied depending on experience grid and agent response.<br/>If no response is given, the request will time out in 5 minutes."),
    ("llRequestInventoryData",LLKey,[("name",LLString)],
        "Requests data from object's inventory object.  When data is available the dataserver event will be raised."),
    ("llRequestPermissions",LLVoid,[("agent",LLKey),("perm",LLInteger)],
        "Ask agent to allow the script to do perm (NB: Debit, ownership, link, joint, and permission requests can only go to the task's owner)."),
    ("llRequestSecureURL",LLKey,[],
        "Requests one HTTPS:// (SSL) url for use by this object. The http_request event is tiggered with results."),
    ("llRequestSimulatorData",LLKey,[("simulator",LLString),("data",LLInteger)],
        "Requests data about simulator.  When data is available the dataserver event will be raised."),
    ("llRequestURL",LLKey,[],
        "Requests one HTTP:// url for use by this object. The http_request event is tiggered with results."),
    ("llRequestUserKey",LLKey, [("id",LLString)],
        "Requests the Username of the agent identified by id. When Username is available the dataserver event will be raised. The agent identified by id does not need to be in the same region or online at the time of the request."),
    ("llRequestUsername",LLKey,[("username",LLKey)],
        "Requests the Agent ID for the agent identified by name from the dataserver. Names are always provided in the form \"First[ Last]\" or \"first[.last]\" (first name with an optional last name.) If the last name is omitted a last name of \"Resident\" is assumed. Case is not considered when resolving agent names. Returns a handle (a key) that can be used to identify the request when the dataserver event is raised."),
    ("llResetAnimationOverride",LLVoid,[("anim_state",LLString)],
        "Resets the animation override of the specified animation state (anim_state) to the corresponding default value."),
    ("llResetLandBanList",LLVoid,[],
        "Removes all residents from the land ban list."),
    ("llResetLandPassList",LLVoid,[],
        "Removes all residents from the land access/pass list."),
    ("llResetOtherScript",LLVoid,[("name",LLString)],
        "Resets script name."),
    ("llResetScript",LLVoid,[],
        "Resets the script."),
    ("llResetTime",LLVoid,[],
        "Sets the time to zero."),
    ("llReturnObjectsByID",LLInteger,[("objects",LLList)],
        "Returns an integer that is the number of objects successfully returned to their owners or an ERR_* flag."),
    ("llReturnObjectsByOwner",LLInteger,[("owner",LLKey),("scope",LLInteger)],
        "Returns an integer that is the number of objects successfully returned to their owners or an ERR_* flag."),
    ("llRezAtRoot",LLVoid,[("inventory",LLString),("pos",LLVector),("vel",LLVector),("rot",LLRot),("param",LLInteger)],
        "Instantiate owner's inventory object at pos with velocity vel and rotation rot with start parameter param.<br/>The last selected root object's location will be set to pos."),
    ("llRezObject",LLVoid,[("inventory",LLString),("pos",LLVector),("vel",LLVector),("rot",LLRot),("param",LLInteger)],
        "Instantiate owners inventory object at pos with velocity vel and rotation rot with start parameter param."),
    ("llRezObjectWithParams",LLKey,[("inventory",LLString),("params",LLList)],
        "Instantiate inventory object at pos with an initial set of parameters specified in params. Returns a key which will be the key of the object when it is successfully rezzed in the world."),        
    ("llRot2Angle",LLFloat,[("rot",LLRot)],
        "Returns the rotation angle represented by rot."),
    ("llRot2Axis",LLVector,[("rot",LLRot)],
        "Returns the rotation axis represented by rot."),
    ("llRot2Euler",LLVector,[("q",LLRot)],
        "Returns the Euler representation (roll, pitch, yaw) of q."),
    ("llRot2Fwd",LLVector,[("q",LLRot)],
        "Returns the forward vector defined by q."),
    ("llRot2Left",LLVector,[("q",LLRot)],
        "Returns the left vector defined by q."),
    ("llRot2Up",LLVector,[("q",LLRot)],
        "Returns the up vector defined by q."),
    ("llRotBetween",LLRot,[("v1",LLVector),("v2",LLVector)],
        "Returns the rotation to rotate v1 to v2."),
    ("llRotLookAt",LLVoid,[("target",LLRot),("strength",LLFloat),("damping",LLFloat)],
        "Cause object name to point it's forward axis towards target."),
    ("llRotTarget",LLInteger,[("rot",LLRot),("error",LLFloat)],
        "Set rotations with error of rot as a rotational target and return an ID for the rotational target."),
    ("llRotTargetRemove",LLVoid,[("number",LLInteger)],
          "Removes rotational target number."),
    ("llRotateTexture",LLVoid,[("rotation",LLFloat),("face",LLInteger)],
        "Sets the texture rotation for the chosen face."),
    ("llRound",LLInteger,[("val",LLFloat)],
        "Returns val rounded to the nearest integer."),
    ("llSHA1String",LLString,[("src",LLString)],
        "Returns a string of 40 hex characters that is the SHA1 security hash of src."),
    ("llSHA256String",LLString,[("src",LLString)],
        "Returns a string of 64 hex characters that is the SHA-256 security hash of src."),
    ("llSameGroup",LLInteger,[("id",LLKey)],
        "Returns TRUE if ID is in the same sim and has the same active group, otherwise FALSE."),
    ("llSay",LLVoid,[("channel",LLInteger),("msg",LLString)],
        "Says msg on channel."),
    ("llScaleByFactor",LLInteger,[("scaling_factor",LLFloat)],
        "Attempts to resize the entire object by scaling_factor (multiplier), maintaining the size-position ratios of the prims. Follows scale, linkability limits. Can not resize physical, pathfinding char, in a keyframe motion or if resizing would cause the parcel to overflow. Returns TRUE if succeeded, FALSE if failed.<br/>See Also: llGetMinScaleFactor, llGetMaxScaleFactor."),
    ("llScaleTexture",LLVoid,[("scales",LLFloat),("scalet",LLFloat),("face",LLInteger)],
        "Sets the texture s, t scales for the chosen face."),
    ("llScriptDanger",LLInteger,[("pos",LLVector)],
        "Returns true if pos is over public land, sandbox land, land that doesn't allow everyone to edit and build, or land that doesn't allow outside scripts."),
    ("llScriptProfiler",LLVoid,[("flags",LLInteger)],
        "Enables or disables the scripts profiling state."),
    ("llSendRemoteData",LLKey,[("channel",LLKey),("dest",LLString),("idata",LLInteger),("sdata",LLString)],
        "Send an XML-RPC request to dest through channel with payload of channel (in a string), integer idata and string sdata.<br/>A message identifier key is returned.<br/>An XML-RPC reply will trigger a remote_data event and reference the message id.<br/>The message_id is returned."),
    ("llSensor",LLVoid,[("name",LLString),("id",LLKey),("type",LLInteger),("range",LLFloat),("arc",LLFloat)],
        "Performs a single scan for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0)."),
    ("llSensorRemove",LLVoid,[],
        "Removes sensor."),
    ("llSensorRepeat",LLVoid,[("name",LLString),("id",LLKey),("type",LLInteger),("range",LLFloat),("arc",LLFloat),("rate",LLFloat)],
        "Sets a callback for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0) and repeats every rate seconds."),
    ("llSetAgentEnvironment",LLVoid,[("agent_id",LLKey),("transition",LLFloat),("params",LLList)],
        "*** Experience enabled script only ***<br/><br/>Sets environment values for an individual agent in an experience and returns ENV_* error code or '1' upon success. The changes to the environment persist until the agent moves to a new region or llSetAgentEnvironment is called for an agent with an empty list. Passing an empty list in params will strip all environmental settings applied to this agent as part of the experience."),
    ("llSetAlpha",LLVoid,[("alpha",LLFloat),("face",LLInteger)],
        "Sets the alpha."),
    ("llSetAngularVelocity",LLVoid,[("force",LLVector),("local",LLInteger)],
        "Applies rotational velocity to object.<br/>integer local - boolean, if TRUE uses local axis, if FALSE uses region axis."),
    ("llSetAnimationOverride",LLVoid,[("anim_state",LLString),("anim",LLString)],
         "Set the animation (anim) that will play for the given animation state (anim_state)."),
    ("llSetBuoyancy",LLVoid,[("bouancy",LLFloat)],
        "Set the tasks buoyancy (0 is none, &lt; 1.0 sinks, 1.0 floats, &gt; 1.0 rises)."),
    ("llSetCameraAtOffset",LLVoid,[("offset",LLVector)],
        "Sets the camera at offset used in this object if an avatar sits on it."),
    ("llSetCameraEyeOffset",LLVoid,[("offset",LLVector)],
        "Sets the camera eye offset used in this object if an avatar sits on it."),
    ("llSetCameraParams",LLVoid,[("rules",LLList)],
        "Sets multiple camera parameters at once.<br/>List format is [ rule1, data1, rule2, data2 . . . rulen, datan ]."),
    ("llSetClickAction",LLVoid,[("action",LLInteger)],
        "Sets the action performed when a prim is clicked upon."),
    ("llSetColor",LLVoid,[("color",LLVector),("face",LLInteger)],
        "Sets the color."),
    ("llSetContentType",LLVoid,[("request_id",LLKey),("content_type",LLInteger)],
        "Set the Internet media type of an LSL HTTP server response. content_type: CONTENT_TYPE_TEXT, CONTENT_TYPE_HTML."),
    ("llSetDamage",LLVoid,[("damage",LLFloat)],
        "Sets the amount of damage that will be done when this object hits an avatar. -100.0 (full heal) to 100.0 (instant kill)"),
    ("llSetEnvironment",LLVoid,[("position",LLVector),("params",LLList)],
        "Overrides the environmental settings for a region or a parcel."),
    ("llSetForce",LLVoid,[("force",LLVector),("local",LLInteger)],
        "Sets force on object, in local coords if local == TRUE (if the script is physical)."),
    ("llSetForceAndTorque",LLVoid,[("force",LLVector),("torque",LLVector),("local",LLInteger)],
        "Sets the force and torque of object, in local coords if local == TRUE (if the script is physical)."),
    ("llSetHoverHeight",LLVoid,[("height",LLFloat),("water",LLInteger),("tau",LLFloat)],
        "Critically damps to a height (either above ground level or above the higher of land and water if water == TRUE)."),
    ("llSetInventoryPermMask",LLVoid,[("item",LLString),("mask",LLInteger),("value",LLInteger)],
        "Sets the given permission mask to the new value on the inventory item."),
    ("llSetKeyframedMotion",LLVoid,[("keyframes",LLList),("options",LLList)],
        "Specify a list of times, positions, and orientations to be followed by an object. The object will be smoothly moved between keyframes by the simulator."),
    ("llSetLinkAlpha",LLVoid,[("linknumber",LLInteger),("alpha",LLFloat),("face",LLInteger)],
        "If a prim exists in the link chain at linknumber, set face to alpha."),
    ("llSetLinkCamera",LLVoid,[("link",LLInteger),("eye",LLVector),("at",LLVector)],
        "Sets the camera eye offset, and the offset that camera is looking at, for avatars that sit on the linked prim."),
    ("llSetLinkColor",LLVoid,[("linknumber",LLInteger),("color",LLVector),("face",LLInteger)],
        "If a task exists in the link chain at linknumber, set face to color."),
    ("llSetLinkMedia",LLInteger,[("link",LLInteger),("face",LLInteger),("params",LLList)],
        "Set the media params for a particular face on the linked prim(s) without a delay."),
    ("llSetLinkPrimitiveParams",LLVoid,[("linknumber",LLInteger),("rules",LLList)],
        "Set primitive parameters for linknumber based on rules."),
    ("llSetLinkPrimitiveParamsFast",LLVoid,[("linknumber",LLInteger),("rules",LLList)],
        ".Set primitive parameters for linknumber based on rules with no built-in script sleep. This function is identical to llSetLinkPrimitiveParams except without the delay."),
    ("llSetLinkSitFlags",LLVoid,[("link",LLInteger),("flags",LLInteger)],
        "Sets flags on the link's sittarget."),
    ("llSetLinkTexture",LLVoid,[("link_pos",LLInteger),("texture",LLString),("face",LLInteger)],
        "Sets the texture of face for link_pos."),
    ("llSetLinkTextureAnim",LLVoid,[("link",LLInteger),("mode",LLInteger),("face",LLInteger),("sizex",LLInteger),("sizey",LLInteger),("start",LLFloat),("length",LLFloat),("rate",LLFloat)],
        "Animate the texture on the specified face/faces of the specified prim/prims by setting the texture scale and offset. Identical to llSetTextureAnim except able to modify any prim in the link set."),
    ("llSetLocalRot",LLVoid,[("rot",LLRot)],
         "Sets the rotation of a child prim relative to the root prim."),
    ("llSetMemoryLimit",LLInteger,[("limit",LLInteger)],
        "Request limit bytes to be reserved for this script. Returns the integer TRUE or FALSE indicating if the memory limit was set."),
    ("llSetObjectDesc",LLVoid,[("name",LLString)],
        "Sets the object's description."),
    ("llSetObjectName",LLVoid,[("name",LLString)],
        "Sets the objects name."),
    ("llSetObjectPermMask",LLVoid,[("mask",LLInteger),("value",LLInteger)],
        "Sets the given permission mask to the new value on the root object the task is attached to."),
    ("llSetParcelMusicURL",LLVoid,[("url",LLString)],
        "Sets the streaming audio URL for the parcel object is on."),
    ("llSetPayPrice",LLVoid,[("price",LLInteger),("quick_pay_buttons",LLList)],
        "Sets the default amount when someone chooses to pay this object."),
    ("llSetPhysicsMaterial",LLVoid,[("material_bits",LLInteger),("gravity_multiplier",LLFloat),("resitution",LLFloat),("friction",LLFloat),("density",LLFloat)],
        "Sets physics material."),
    ("llSetPos",LLVoid,[("pos",LLVector)],
        "Sets the position (if the script isn't physical)."),
    ("llSetPrimMediaParams",LLInteger,[("face",LLInteger),("params",LLList)],
        "Set the media params for a particular face."),
    ("llSetPrimURL",LLVoid,[("url",LLString)],
         "Updates the URL for the web page shown on the sides of the object."),
    ("llSetPrimitiveParams",LLVoid,[("rules",LLList)],
        "Set primitive parameters based on rules."),
    ("llSetRegionPos",LLInteger,[("coordinates",LLVector)],
        "Set region pos."),
    ("llSetRemoteScriptAccessPin",LLVoid,[("pin",LLInteger)],
        "If pin is set to a non-zero number, the task will accept remote script loads via llRemoteLoadScriptPin if it passes in the correct pin. Othersise, llRemoteLoadScriptPin is ignored."),
    ("llSetRot",LLVoid,[("rot",LLRot)],
        "Sets the rotation (if the script isn't physical)."),
    ("llSetScale",LLVoid,[("scale",LLVector)],
        "Sets the scale."),
    ("llSetScriptState",LLVoid,[("name",LLString),("run",LLInteger)],
        "Control the state of a script name."),
    ("llSetSitText",LLVoid,[("text",LLString)],
        "Displays text rather than sit in pie menu."),
    ("llSetSoundQueueing",LLVoid,[("queue",LLInteger)],
        "Determines whether attached sound calls wait for the current sound to finish (0 = no [default], nonzero = yes)."),
    ("llSetSoundRadius",LLVoid,[("radius",LLFloat)],
        "Establishes a hard cut-off radius for audibility of scripted sounds (both attached and triggered)."),
    ("llSetStatus",LLVoid,[("status",LLInteger),("value",LLInteger)],
        "Sets status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z) to value."),
    ("llSetText",LLVoid,[("text",LLString),("color",LLVector),("alpha",LLFloat)],
        "Set text floating over object."),
    ("llSetTexture",LLVoid,[("texture",LLString),("face",LLInteger)],
        "Sets the texture of face."),
    ("llSetTextureAnim",LLVoid,[("mode",LLInteger),("face",LLInteger),("sizex",LLInteger),("sizey",LLInteger),("start",LLFloat),("length",LLFloat),("rate",LLFloat)],
        "Animate the texture on the specified face/faces."),
    ("llSetTimerEvent",LLVoid,[("sec",LLFloat)],
        "Cause the timer event to be triggered every sec seconds."),
    ("llSetTorque",LLVoid,[("torque",LLVector),("local",LLInteger)],
        "Sets the torque of object, in local coords if local == TRUE (if the script is physical)."),
    ("llSetTouchText",LLVoid,[("text",LLString)],
        "Displays text in pie menu that acts as a touch."),
    ("llSetVehicleFlags",LLVoid,[("flags",LLInteger)],
        "Sets the enabled bits in 'flags'."),
    ("llSetVehicleFloatParam",LLVoid,[("param",LLInteger),("value",LLFloat)],
        "Sets the specified vehicle float parameter."),
    ("llSetVehicleRotationParam",LLVoid,[("param",LLInteger),("rot",LLRot)],
        "Sets the specified vehicle rotation parameter."),
    ("llSetVehicleType",LLVoid,[("type",LLInteger)],
        "Sets vehicle to one of the default types."),
    ("llSetVehicleVectorParam",LLVoid,[("param",LLInteger),("vec",LLVector)],
        "Sets the specified vehicle vector parameter."),
    ("llSetVelocity",LLVoid,[("force",LLVector),("local",LLInteger)],
        "Applies velocity to object<br/>integer local - boolean, if TRUE, force is treated as a local directional vector instead of region directional vector."),
    ("llShout",LLVoid,[("channel",LLInteger),("msg",LLString)],
        "Shouts msg on channel."),
    ("llSignRSA",LLString,[("private_key",LLString),("msg",LLString),("algorithm",LLString)],
        "Returns a string that is the Base64-encoded RSA signature of msg when using hash algorithm algorithm and secret key private_key. Can be paired with llVerifyRSA to pass verifiable messages."),
    ("llSin",LLFloat,[("theta",LLFloat)],
        "Theta in radians."),
    ("llSitOnLink",LLInteger,[("agent_id",LLKey),("link",LLInteger)],
        "*** Experience enabled script only ***<br/><br/>The avatar specified by agent_id is forced to sit on the sit target of the prim indicated by the link parameter. If the specified link is already occupied, the simulator searches down the chain of prims in the link set looking for an available sit target.<br/>Returns 1 is success or one of negative number SIT_* constants if failed."),
    ("llSitTarget",LLVoid,[("offset",LLVector),("rot",LLRot)],
        "Set the sit location for this object (if offset == &lt;0,0,0&gt; clear it)."),
    ("llSleep",LLVoid,[("sec",LLFloat)],
        "Put script to sleep for sec seconds."),
    ("llSound",LLVoid,[("sound",LLString),("volume",LLFloat),("queue",LLInteger),("loop",LLInteger)], -- deprecated
        "Plays sound at volume and whether it should loop or not."),
    ("llSoundPreload",LLVoid,[("sound",LLString)],
        "Preloads a sound on viewers within range."),
    ("llSqrt",LLFloat,[("val",LLFloat)],
        "Returns 0 and triggers a Math Error for imaginary results."),
    ("llStartAnimation",LLVoid,[("anim",LLString)],
        "Start animation anim for agent that owns object."),
    ("llStartObjectAnimation",LLVoid,[("anim",LLString)],
        "Start animation for the current object."),
    ("llStopAnimation",LLVoid,[("anim",LLString)],
        "Stop animation anim for agent that owns object."),
    ("llStopHover",LLVoid,[],
        "Stop hovering to a height."),
    ("llStopLookAt",LLVoid,[],
        "Stop causing object name to point at a target."),
    ("llStopMoveToTarget",LLVoid,[],
         "Stops critically damped motion."),
    ("llStopObjectAnimation",LLVoid,[("anim",LLString)],
        "Stop an animation for the current object."),
    ("llStopPointAt",LLVoid,[],
        "Stop agent that owns object pointing."),
    ("llStopSound",LLVoid,[],
        "Stops currently attached sound."),
    ("llStringLength",LLInteger,[("str",LLString)],
        "Returns the length of string."),
    ("llStringToBase64",LLString,[("str",LLString)],
        "Converts a string to the Base 64 representation of the string."),
    ("llStringTrim",LLString,[("src",LLString),("trim_type",LLInteger)],
        "Trim leading and/or trailing spaces from a string.<br/>Uses trim_type of STRING_TRIM, STRING_TRIM_HEAD or STRING_TRIM_TAIL."),
    ("llSubStringIndex",LLInteger,[("source",LLString),("pattern",LLString)],
        "Finds index in source where pattern first appears (returns -1 if not found)."),
    ("llsRGB2Linear",LLVector,[("srgb",LLVector)],
        "Transforms a color specified in the sRGB colorspace to the linear RGB colorspace."),
    ("llTakeCamera",LLVoid,[("avatar",LLKey)],
        "Move avatar's viewpoint to task."),
    ("llTakeControls",LLVoid,[("controls",LLInteger),("accept",LLInteger),("pass_on",LLInteger)],
         "Take controls from agent task has permissions for.  If (accept == (controls &amp; input)), send input to task.  If pass_on send to agent also."),
    ("llTan",LLFloat,[("theta",LLFloat)],
        "Theta radians."),
    ("llTarget",LLInteger,[("position",LLVector),("range",LLFloat)],
        "Set positions within range of position as a target and return an ID for the target."),
    ("llTargetOmega",LLVoid,[("axis",LLVector),("spinrate",LLFloat),("gain",LLFloat)],
        "Attempt to spin at spinrate with strength gain."),
    ("llTargetRemove",LLVoid,[("number",LLInteger)],
        "Removes target number."),
    ("llTargetedEmail",LLVoid,[("target",LLInteger),("subject",LLString),("message",LLString)],
        "Sends an email to the owner (selected by target) of an object with subject and message."),
    ("llTeleportAgent",LLVoid,[("avatar",LLKey),("landmark",LLString),("position",LLVector),("look_at",LLVector)],
        "Requests a teleport of avatar to a landmark stored in the object's inventory."),
    ("llTeleportAgentGlobalCoords",LLVoid,[("agent",LLKey),("global_coordinates",LLVector),("region_coordinates",LLVector),("look_at",LLVector)],
        "Teleports an agent to set of a region_coordinates within a region at the specified global_coordinates."),
    ("llTeleportAgentHome",LLVoid,[("id",LLKey)],
        "Teleports agent on owner's land to agent's home location."),
    ("llTextBox",LLVoid,[("avatar",LLKey),("message",LLString),("chat_channel",LLInteger)],
        "Shows a dialog box on avatar's screen with the text message. It contains a text box for input, any text that is entered is said by avatar on chat_channel when the 'OK' button is clicked."),
    ("llToLower",LLString,[("src",LLString)],
        "Convert src to all lower case and returns the result."),
    ("llToUpper",LLString,[("src",LLString)],
        "Convert src to all upper case and returns the result."),
    ("llTransferLindenDollars",LLKey,[("destination",LLKey),("amount",LLInteger)],
        "Transfer amount of L$ money from script owner to destination avatar.<br/>Returns a key used in a matching transaction_result event for the success or failure of the transfer. If the transaction is successful, this key will show in the transaction history."),
    ("llTriggerSound",LLVoid,[("sound",LLString),("volume",LLFloat)],
        "Plays sound at volume (0.0 - 1.0), centered at but not attached to object."),
    ("llTriggerSoundLimited",LLVoid,[("sound",LLString),("volume",LLFloat),("tne",LLVector),("bsw",LLVector)],
        "Plays sound at volume (0.0 - 1.0), centered at but not attached to object, limited to AABB defined by vectors top-north-east and bottom-south-west."),
    ("llUnSit",LLVoid,[("id",LLKey)],
        "If agent identified by id is sitting on the object the script is attached to or is over land owned by the objects owner, the agent is forced to stand up."),
    ("llUnescapeURL",LLString,[("url",LLString)],
         "Returns and unescaped/unencoded version of url, replacing %20 with spaces etc."),
    ("llUpdateCharacter",LLVoid,[("options",LLList)],
        "Updates settings for the character."),
    ("llUpdateKeyValue",LLKey,[("k",LLString),("v",LLString),("checked",LLInteger),("original_value",LLString)],
        "*** Experience Persistent Storage ***<br/><br/>Start an asynchronous transaction to update a key-value pair associated with the given experience key with the given key and value. Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results.<br/>string k - The key for the key-value pair<br/>string v - The value for the key-value pair. Maximum 2047 characters, or 4095 if using Mono.<br/>integer checked - If TRUE the update will only happen if original_value matches the value in the key-value store.<br/>string original_value - The value to compare with the current value in the key-value store.<br/>If checked is set to TRUE then the update will only happen if original_value matches the current value in key-value store. This can be used to create an in-use flag so that Atomicity can be achieved.<br/>Check wiki what dataserver callback returns."),
    ("llVecDist",LLFloat,[("v1",LLVector),("v2",LLVector)],
        "Returns the 3D distance between v1 and v2."),
    ("llVecMag",LLFloat,[("v",LLVector)],
        "Returns the magnitude of v."),
    ("llVecNorm",LLVector,[("v",LLVector)],
        "Returns the v normalized."),
    ("llVerifyRSA",LLInteger,[("public_key",LLString),("msg",LLString),("signature",LLString),("algorithm",LLString)],
        "Returns an integer indicating whether the RSA signature is valid for msg when using hash algorithm algorithm and public RSA key public_key. Returns TRUE if the signature is verified, and FALSE otherwise. Can be paired with llSignRSA to validate the authenticity of messages from other LSL scripts."),
    ("llVolumeDetect",LLVoid,[("detect",LLInteger)],
        "If detect = TRUE, object becomes phantom but triggers collision_start and collision_end events when other objects start and stop interpenetrating. <br/>Must be applied to the root object."),
    ("llWanderWithin",LLVoid,[("origin",LLVector),("dist",LLVector),("options",LLList)],
        "Sets a character to wander about a central spot within a specified radius."),
    ("llWater",LLFloat,[("v",LLVector)],
        "Returns the water height below the object position + v."),
    ("llWhisper",LLVoid,[("channel",LLInteger),("msg",LLString)],
        "Whispers msg on channel."),
    ("llWind",LLVector,[("v",LLVector)],
        "Returns the wind velocity at the object position + v."),
    ("llWorldPosToHUD",LLVector,[("world_pos",LLVector)],
        "Returns a vector position in HUD frame that would place the center of the HUD object directly over world_pos as viewed by the current camera."),
    ("llXorBase64",LLString,[("str1",LLString),("str2",LLString)],
        "Returns a string that is a Base64 XOR of str1 and str2."),
    ("llXorBase64Strings",LLString,[("s1",LLString),("s2",LLString)],
        "**DEPRECATED!** Please use llXorBase64 instead! Incorrectly performs an exclusive or on two Base 64 strings and returns a Base 64 string. s2 repeats if it is shorter than s1. Retained for backwards compatibility."),
    ("llXorBase64StringsCorrect",LLString,[("s1",LLString),("s2",LLString)],
        "**DEPRECATED!** Please use llXorBase64 instead! Incorrectly performs an exclusive or on two Base 64 strings and returns a Base 64 string. s2 repeats if it is shorter than s1. Retained for backwards compatibility.\n")
    ]
